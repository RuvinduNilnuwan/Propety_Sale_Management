/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.addController;
import Control.updateController;
import Model.DBSearch;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.text.*;
import java.awt.print.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javafx.print.Printer;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author Malki Prarthana
 */
public class monthlyBill extends javax.swing.JFrame {

    /**
     * Creates new form monthlyBill
     */
    public monthlyBill() {
        initComponents();
        loadCustomerID();
        //txtPayment.enable(false);
        txtDateNow.setVisible(false);
        txtTimeNow.setVisible(false);
        txtCurrentDueAmount.enable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCustomerAddress = new javax.swing.JTextField();
        txtCustomerNIC = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        cmbCustomerID = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCurrentDueDate = new javax.swing.JTextField();
        txtPayment = new javax.swing.JTextField();
        txtCurrentDueAmount = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        tp = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnPay = new javax.swing.JButton();
        btnGenarate = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        lblnoOfMonths = new javax.swing.JLabel();
        txtDateNow = new javax.swing.JTextField();
        txtTimeNow = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMonthlyRecipt = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 480));
        setSize(new java.awt.Dimension(900, 480));

        jInternalFrame1.setMaximumSize(null);
        jInternalFrame1.setMinimumSize(null);
        jInternalFrame1.setPreferredSize(new java.awt.Dimension(900, 440));
        jInternalFrame1.setVisible(true);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Monthly Payment");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Customer Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Customer ID :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Name :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("NIC :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Address : ");

        cmbCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCustomerAddress)
                    .addComponent(txtCustomerName)
                    .addComponent(cmbCustomerID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCustomerNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCustomerNIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustomerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Payment Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Current Due Date :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("monthly Due Amount : ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Payment : ");

        txtCurrentDueAmount.setEditable(false);
        txtCurrentDueAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurrentDueAmountActionPerformed(evt);
            }
        });

        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("jh");

        tp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tpActionPerformed(evt);
            }
        });

        jLabel9.setText("Amount to be payed");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(60, 60, 60)
                                .addComponent(txtPayment))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCurrentDueAmount))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel9)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tp)
                            .addComponent(txtCurrentDueDate))))
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblStatus)
                .addGap(92, 92, 92))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lblStatus)
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCurrentDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCurrentDueAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPayment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        btnPay.setBackground(new java.awt.Color(0, 102, 102));
        btnPay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPay.setForeground(new java.awt.Color(255, 255, 255));
        btnPay.setText("Pay Now");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        btnGenarate.setBackground(new java.awt.Color(0, 102, 102));
        btnGenarate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenarate.setForeground(new java.awt.Color(255, 255, 255));
        btnGenarate.setText("Save & Print Recipt");
        btnGenarate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenarateActionPerformed(evt);
            }
        });

        btnPrint.setBackground(new java.awt.Color(0, 102, 102));
        btnPrint.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("View Recipt");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        lblnoOfMonths.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnGenarate, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblnoOfMonths)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(txtDateNow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(141, 141, 141)
                .addComponent(txtTimeNow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtDateNow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimeNow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(lblnoOfMonths)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPay, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnGenarate, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addGap(41, 41, 41))
        );

        txtMonthlyRecipt.setColumns(20);
        txtMonthlyRecipt.setRows(5);
        jScrollPane1.setViewportView(txtMonthlyRecipt);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, 1327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerIDActionPerformed
        
        String CustomerID=(String)cmbCustomerID.getSelectedItem();
        
        DBSearch obj=new DBSearch();
        ResultSet rs=obj.serchCustomers(CustomerID);
    
        
        try{
            while(rs.next()){
                txtCustomerName.setText(rs.getString("CustomerName"));
                txtCustomerNIC.setText(rs.getString("CustomerAddress"));
                txtCustomerAddress.setText(rs.getString("CustomerNICNumber"));
                
                clear();
                
            }
            calculatedueAmount(CustomerID);
            displaydueAmount(CustomerID);
        }
        catch(Exception k){
            System.out.println("Error"+k.toString());
        }
    }//GEN-LAST:event_cmbCustomerIDActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        try{
            
        
            String CustomerID=(String)cmbCustomerID.getSelectedItem();
            double paymentAmount=Double.parseDouble(txtPayment.getText());
            double dueAmount=Double.parseDouble(txtCurrentDueAmount.getText());
            String Status=lblStatus.getText();
            double noOfMonths=Double.valueOf(lblnoOfMonths.getText());

            Date currentDate = new Date();
            SimpleDateFormat sdf =new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            String CurrentDate = sdf.format(currentDate);
            
            
            String nextdueDate=txtCurrentDueDate.getText();
            
            //if the whole payment.
            if(paymentAmount==dueAmount){
                
                if(noOfMonths==0.0){
                    noOfMonths=1.0;
                }
                else{
                    noOfMonths=noOfMonths;
                }
                //month add
                LocalDate dt=LocalDate.parse(nextdueDate);
                LocalDate newDate=dt.plusMonths((long)noOfMonths);
                
                //System.out.println("Months added date" +newDate);
                
                double BalanceDueAmount=0;
                addController obj = new addController();
                obj.addMonthlyPayment(CustomerID,String.valueOf(paymentAmount),String.valueOf(BalanceDueAmount),CurrentDate,Status);
            
                updateController objj=new updateController();
                objj.updatedueDate(String.valueOf(newDate),CustomerID);
                
                calculatedueAmount(CustomerID);
                displaydueAmount(CustomerID);
                
                calculateTotalBalance(CustomerID,paymentAmount);
            }
            else{
                /*
                //dueAmount/m
                double BalanceDueAmount=dueAmount-paymentAmount;
                addController obj = new addController();
                obj.addMonthlyPayment(CustomerID,String.valueOf(paymentAmount),String.valueOf(BalanceDueAmount),CurrentDate,Status);
                
                updateController objj=new updateController();
                objj.updatebalanceDueAmount(String.valueOf(BalanceDueAmount),String.valueOf(newDate),CustomerID);
*/
            }
        }
        catch(Exception e){
                e.printStackTrace();
        }
  
    }//GEN-LAST:event_btnPayActionPerformed

    private void txtCurrentDueAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurrentDueAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentDueAmountActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
         DateTimeFormatter dnow = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
         LocalDateTime dtnow = LocalDateTime.now();  
         txtDateNow.setText(dnow.format(dtnow));
         
         DateTimeFormatter tnow = DateTimeFormatter.ofPattern("HH:mm:ss");  
         LocalDateTime ttnow = LocalDateTime.now();  
         txtTimeNow.setText(tnow.format(ttnow));
        
       txtMonthlyRecipt.append("\n\t\t     Monthy Payment\n\n\n"
                                +"\tCustomer Id: \t\t"+cmbCustomerID.getSelectedItem()+"\n"
                                +"\tName: \t\t"+txtCustomerName.getText()+"\n"
                                +"\tNIC: \t\t"+txtCustomerNIC.getText()+"\n"
                                +"\tAddress: \t\t"+txtCustomerAddress.getText()+"\n\n"
                                +"\tPayment: \t\t"+txtPayment.getText()+"\n"
                                +"\tNext Payment Date: \t"+txtCurrentDueDate.getText()+"\n"
                                +"\tDue Amount: \t\t"+txtCurrentDueAmount.getText()+"\n\n"
                                
                                
                                +"\tPayment Accepted By: \t..............................\n"
                                
                                +"\t\t\t(..............................)\n"
                                +"\t\t\tAccount's Executive\n\n"
                                +"__________________________________________________________"  
                                +"\n\t\tTime: "+txtTimeNow.getText()+"\n"
                                +"\t\tDate: "+txtDateNow.getText()+"\n"
                                +"\n\t\tThank You For Visiting Us!");
        
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnGenarateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenarateActionPerformed
        // TODO add your handling code here:
        try{
            txtMonthlyRecipt.print();
        }
        catch(java.awt.print.PrinterException e){
            System.err.format("Not found...", e.getMessage());
        }
        txtMonthlyRecipt.setText("");
        txtCustomerName.setText("");
        txtCustomerNIC.setText("");
        txtCustomerAddress.setText("");
        txtPayment.setText("");
        txtCurrentDueDate.setText("");
        txtCurrentDueAmount.setText("");
        
        
        
    }//GEN-LAST:event_btnGenarateActionPerformed

    private void tpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(monthlyBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(monthlyBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(monthlyBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(monthlyBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new monthlyBill().setVisible(true);
            }
        });
    }
    private void loadCustomerID() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DBSearch obj=new DBSearch();
    ResultSet rs=obj.loadAvailableCustomers();
        
        try{
            while(rs.next()){
                cmbCustomerID.addItem(rs.getString("CustomerID"));
                
            }
            
        }
        catch(Exception k){
            System.out.println("Error"+k.toString());
        }
    }
    
    public void calculatedueAmount(String CustomerID){
        DBSearch obj=new DBSearch();
        ResultSet rs=obj.searchDueAmount(CustomerID);
        
        try{
            while(rs.next()){
                String nextdueDate=rs.getString("NextDueDate");    
                double Balance=Double.valueOf(rs.getString("BalanceOfHirePurchaseAmount"));
                double dueAmount=0;
                
                if(Balance==0.0){
                    txtCurrentDueAmount.setText("0.0");
                    txtCurrentDueDate.setText("Total amount has been paid");
                    
                    btnPay.enable(false);
                }
                else{
                
                        //Due Date
                        String dueDate=nextdueDate;
                        Date date = StringToDate(dueDate); 

                        SimpleDateFormat sdf2 =new SimpleDateFormat("yyyy-MM-dd");
                        String newD = sdf2.format(date);

                        //Current Date.
                        Date currentDate = new Date();
                        SimpleDateFormat sdf =new SimpleDateFormat("dd-MM");
                        String CurrentDate = sdf.format(currentDate);

                        double lateInterest=lateInterestRate();

                        if(new SimpleDateFormat("yyyy-MM-dd").parse(newD).compareTo(new Date())==1){
                            
                            tp.setText(rs.getString("BalanceOfHirePurchaseAmount"));
                            txtCurrentDueAmount.setText(rs.getString("BalanceOfHirePurchaseAmount"));
                            txtCurrentDueDate.setText(newD);
                            lblStatus.setText("Not Late");
                            txtCurrentDueDate.setForeground(java.awt.SystemColor.BLACK);
                            lblnoOfMonths.setText("0");

                            updateController obj2=new updateController();
                            obj2.updatebalanceDueAmount(rs.getString("MonthlyAmount"),CustomerID);
                        }
                        else{
                            try{
                                double monthlyamount=Double.parseDouble(rs.getString("MonthlyAmount"));
                                //late interest. 
                                txtCurrentDueDate.setText(newD);
                                txtCurrentDueDate.setForeground(java.awt.SystemColor.RED);
                                lblStatus.setText("Late");

                                //gap in ms.
                                long timeDifference=currentDate.getTime()-date.getTime();                
                                //gap in days.
                                long dayDifferene=(timeDifference/(1000*60*60*24))%365;                

                                double multiple=dayDifferene/30;
                                double remain=dayDifferene%30;
                                double newCurrentAmount=0;

                                if(remain!=0){

                                    multiple=multiple+1;
                                    lblnoOfMonths.setText(""+multiple);


                                    for(int x=0;x<multiple;x++){
                                        newCurrentAmount=dueAmount+monthlyamount;

                                        dueAmount=newCurrentAmount+newCurrentAmount*lateInterest;
                                        System.out.println("in if");

                                    }

                                    DecimalFormat df=new DecimalFormat("####.###");

                                    //Update due amount in table.
                                    updateController obj2=new updateController();
                                    obj2.updatebalanceDueAmount(String.valueOf(dueAmount),CustomerID);
                                    //txtCurrentDueAmount.setText(String.valueOf(dueAmount));
                                    System.out.println(dueAmount);
                                }
                                else{
                                    lblnoOfMonths.setText(""+multiple);
                                    for(int x=0;x<multiple;x++){
                                        newCurrentAmount=dueAmount+monthlyamount;

                                        dueAmount=newCurrentAmount+newCurrentAmount*lateInterest;
                                        //Update due amount in table.
                                        updateController obj2=new updateController();
                                        obj2.updatebalanceDueAmount(String.valueOf(dueAmount),CustomerID);

                                        System.out.println(dueAmount);

                                    }

                                    DecimalFormat df=new DecimalFormat("###.###");
                                        System.out.println("Due Amount : "+df.format(dueAmount));
                                }



                            }
                            catch(Exception e){
                                e.printStackTrace();
                            }

                    }
            }
            
        }
        
    }
    catch(Exception e){
            e.printStackTrace();
        }
        
    }

    public static Date StringToDate(String s){

        Date result = null;
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            result  = dateFormat.parse(s);
        }

        catch(ParseException e){
            e.printStackTrace();

        }
        return result ;

    }
    
    public double lateInterestRate(){
    //LateInterestRate.
                DBSearch objj=new DBSearch();
                ResultSet rss =objj.searchLateInterestRate();
                try{
                    while(rss.next()){
                        double monthlyRate=Double.valueOf(rss.getString("RateValue"))/100;
                        System.out.println(monthlyRate);
                        return monthlyRate;
                    }
                }
                catch(Exception e){
                        
                }
        return 0.0;
    }
    
    public void displaydueAmount(String CustomerID){
        DBSearch objj=new DBSearch();
        ResultSet rss =objj.searchDueAmount(CustomerID);
            try{
                while(rss.next()){
                    String dueAmount=rss.getString("BalanceDueAmount");
                    double Balance=Double.valueOf(rss.getString("BalanceOfHirePurchaseAmount"));
                
                
                if(Balance==0.0){
                    txtCurrentDueAmount.setText("0.0");
                    txtCurrentDueDate.setText("Total amount has been paid");
                    
                    btnPay.enable(false);
                }
                else{
                    txtCurrentDueAmount.setText(dueAmount);
                    txtPayment.setText(dueAmount);
                }
                    
                }
            }
            catch(Exception e){
                        
            }
    }
    public void clear(){
        txtCurrentDueAmount.setText("");
        txtCurrentDueDate.setText("");
        txtPayment.setText("");
        txtMonthlyRecipt.setText("");
    }
    
    public static void calculateTotalBalance(String CustomerID,double paymentAmount){
        DBSearch objj=new DBSearch();
        ResultSet rss =objj.searchDueAmount(CustomerID);
        
       
        try{
                while(rss.next()){
                    double totalBalance=Double.valueOf(rss.getString("BalanceOfHirePurchaseAmount"));
                    totalBalance=totalBalance-paymentAmount;
                    
                    updateController obj2=new updateController();
                    obj2.updatebalanceTotalAmount(String.valueOf(totalBalance),CustomerID);
                    
                }
            }
            catch(Exception e){
                        
            }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenarate;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox<String> cmbCustomerID;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblnoOfMonths;
    private javax.swing.JTextField tp;
    private javax.swing.JTextField txtCurrentDueAmount;
    private javax.swing.JTextField txtCurrentDueDate;
    private javax.swing.JTextField txtCustomerAddress;
    private javax.swing.JTextField txtCustomerNIC;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtDateNow;
    private javax.swing.JTextArea txtMonthlyRecipt;
    private javax.swing.JTextField txtPayment;
    private javax.swing.JTextField txtTimeNow;
    // End of variables declaration//GEN-END:variables
}
